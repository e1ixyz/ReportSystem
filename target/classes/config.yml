# === ReportSystem – Default Configuration ===

# ------------------------------------------------------------------------------------
# CORE
# ------------------------------------------------------------------------------------
allow-self-report: false                 # Allow players to report themselves?
stack-window-seconds: 600                # Seconds to merge ("stack") identical reports (same target/type/category)
export-html-chatlog: true               # If true, chat logs export to HTML on /reports chat
html-export-dir: "html-logs"            # Folder under the plugin data directory for HTML exports
reports-per-page: 10

# Permissions
staff-permission: "reportsystem.reports"        # Staff can use /reports, bypass cooldown, view protected web pages, etc.
notify-permission: "reportsystem.notify"        # Staff who should receive ingame notifications about new reports
force-claim-permission: "reportsystem.forceclaim"  # Staff who may override someone else’s claim

# ------------------------------------------------------------------------------------
# REPORT COOLDOWN
# ------------------------------------------------------------------------------------
# Players must wait this long between /report commands.
# Users with staff-permission bypass this cooldown.
report-cooldown-seconds: 60

# ------------------------------------------------------------------------------------
# INLINE PREVIEW (safety for ingame chat previews)
# ------------------------------------------------------------------------------------
preview-lines: 10
preview-line-max-chars: 200

# ------------------------------------------------------------------------------------
# PUBLIC URLS FOR LINKS SHOWN IN CHAT
# ------------------------------------------------------------------------------------
# Leave blank by default (no private domain committed). If you have a public domain later,
# set EITHER public-base-url OR http-server.external-base-url (prefer public-base-url).
public-base-url: ""                     # e.g. "https://reports.example.com"

http-server:
  enabled: true                         # Built-in tiny web server to serve html-logs/
  external-base-url: ""                 # e.g. "https://reports.example.com" (used for links when public-base-url is blank)
  bind: "0.0.0.0"                       # Listen address
  port: 8085
  base-path: "/"                        # Mount path (keep "/" unless you know you need a subpath)

# ------------------------------------------------------------------------------------
# LIGHTWEIGHT WEB AUTH
# ------------------------------------------------------------------------------------
auth:
  enabled: true
  cookie-name: "rsid"
  session-ttl-minutes: 1440             # Sliding session TTL (minutes)
  code-ttl-seconds: 120                  # One-time code lifetime (seconds) for /reports auth
  code-length: 6
  secret: "change-me"                    # Change in production; used for signing session ids
  open-paths:                            # Paths accessible without auth (when auth is enabled)
    - "/login"
    - "/favicon.ico"
  require-permission: true               # Require staff-permission to run /reports auth and receive a code

# ------------------------------------------------------------------------------------
# DISCORD WEBHOOK (optional)
# ------------------------------------------------------------------------------------
discord:
  enabled: false
  webhook-url: ""
  username: "ReportSystem"
  avatar-url: ""
  timeout-ms: 4000

# ------------------------------------------------------------------------------------
# MULTI-FACTOR PRIORITY SCORING
# ------------------------------------------------------------------------------------
# The system computes a numeric score for each open report to sort them. All factors
# are (optionally) normalized to 0..1 and then combined linearly with weights.
#
# Effective Score = Sum( weight_i * factor_i ), only for factors whose "use-*" is true.
#
# The defaults aim to be sensible for a *large-scale* network (hundreds of reports/hour):
# - Severity and SLA-breach get higher weights to pull critical cases to the top quickly.
# - Recency and Count matter, but less than Severity/SLA.
# - Evidence signal (e.g., chat captured) slightly boosts credibility.
# - Unassigned and Aging help surface stale or ownerless reports.
#
# You can *disable* any factor (set use-...: false) or adjust its weight (w-...).
priority:
  enabled: true

  # ----------------- Enable/Disable individual factors -----------------
  use-count: true        # Higher stack count => higher priority (signals repeated/duplicate reports)
  use-recency: true      # Newer reports rank higher (exponential decay via tau-ms)
  use-severity: true     # Per type/category severity mapping (see severity-by-key below)
  use-evidence: true     # Has useful evidence? (e.g., captured chat for chat reports)
  use-unassigned: true   # Small bump if a report is unassigned (encourages triage pickup)
  use-aging: true        # Slight bump as time passes (counteracts recency decay to avoid starvation)
  use-sla-breach: true   # Large bump if report is past SLA target (see sla-minutes)

  # ----------------- Weights (importance) -----------------
  # Tip: Larger networks should keep SLA and Severity fairly high.
  #      Recency and Count are next. Evidence, Aging, Unassigned are smaller nudge factors.
  w-count: 2.0
  w-recency: 2.0
  w-severity: 3.0
  w-evidence: 1.0
  w-unassigned: 0.5
  w-aging: 1.0
  w-sla-breach: 4.0

  # ----------------- Normalization & shaping params -----------------
  tau-ms: 900000         # 15 minutes exponential time constant for RECENCY decay:
                         # recency = exp(-age_ms / tau_ms). New reports get ~1.0, older trend toward 0.

  # ----------------- Severity map -----------------
  # Key format: "<typeId>/<categoryId>" (case-insensitive)
  # Values are floats; typical range 0.5..3.0. Higher => more urgent by default.
  severity-by-key:
    "player/cheat": 3.0
    "server/crash": 2.5
    "player/chat": 1.0
    "player/ad": 1.5
    # Add more categories as needed…

  # ----------------- SLA targets (minutes) -----------------
  # If an open report exceeds its SLA, it receives an SLA-breach bonus scaled toward 1 as time exceeds SLA.
  # Example shaping (implementation detail): breach_ratio = clamp(age / (2 * sla), 0..1).
  sla-minutes:
    "player/cheat": 5
    "server/crash": 2
    "player/chat": 15
    # Add more categories as needed…

# ------------------------------------------------------------------------------------
# MESSAGES / LOCALIZATION
# ------------------------------------------------------------------------------------
messages:
  prefix: "<gray>[<gold>Reports</gold>]</gray> "
  no-permission: "<red>You don't have permission.</red>"
  usage-report: "Usage: /report <type> <category> [<target>] <reason...>"
  invalid-type: "Unknown type or category: %type%/%cat%"
  self-report-denied: "You cannot report yourself."
  report-stacked: "Report stacked into #%id% (now x%count%)"
  report-filed: "Report filed! (ID #%id%)"
  not-found: "No such report: #%id%"
  closed: "Closed report #%id%"
  assigned: "Assigned report #%id% to %assignee%"
  unassigned: "Unassigned report #%id%"
  already-unassigned: "Report #%id% is not assigned."
  search-empty: "No matching reports."
  search-header: "Search: %query% (%scope%)"
  page-empty: "No open reports."
  page-header: "Reports Page %page%/%pages%"
  reloaded: "ReportSystem reloaded."
  chatlog-none: "No chat messages were captured for this report."
  tip-open-browser: "Open in browser"
  tip-copy-path: "Copy local path"
  tip-expand: "Click to expand"
  tip-prev: "Previous page"
  tip-next: "Next page"
  tip-reload: "Reload reports"
  tip-close: "Close this report"
  tip-chat: "View chat logs"
  tip-jump-server: "Connect to this server"
  tip-assign-me: "Assign to me"
  tip-unassign: "Unassign"
  tip-force-claim: "Force-claim"
  auth-code-ttl-s: "120"
  expanded-header: "Report #%id% (%type% / %category%)"
  expanded-server-line: "<gray>Server:</gray> <white>%server%</white>"
  jump-command-template: "/server %server%"

# ------------------------------------------------------------------------------------
# DYNAMIC REPORT TYPES
# ------------------------------------------------------------------------------------
# You can add/remove categories freely; type/category ids are what you use on /report.
report-types:
  player:
    display: "Player"
    categories:
      chat: "Chat"
      cheat: "Cheating"
      ad: "Advertising"
      grief: "Griefing"
  server:
    display: "Server"
    categories:
      crash: "Crash"
      lag: "Lag"
      dupe: "Duplication Bug"

# ------------------------------------------------------------------------------------
# STACK BADGE THRESHOLDS & COLORS (ui only)
# ------------------------------------------------------------------------------------
stack-thresholds:
  yellow: 3
  gold: 5
  red: 10
  dark-red: 15

stack-colors:
  yellow: "<yellow>"
  gold: "<gold>"
  red: "<red>"
  dark-red: "<dark_red>"
